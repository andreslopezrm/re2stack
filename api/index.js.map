{
  "version": 3,
  "sources": ["<stdin>", "../node_modules/@remix-run/dev/dist/compiler/shims/react.ts", "../app/entry.server.tsx", "../app/root.tsx", "../app/routes/index.tsx", "../app/db/idea.server.ts", "../app/db/redis.server.ts", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "import type { EntryContext } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { renderToString } from \"react-dom/server\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  const markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(\"<!DOCTYPE html>\" + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "import type { MetaFunction } from \"@remix-run/node\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"@remix-run/react\";\nimport styles from \"./styles/app.css\"\n\n\nexport const meta: MetaFunction = () => ({\n  charset: \"utf-8\",\n  title: \"Re2 Stack\",\n  viewport: \"width=device-width,initial-scale=1\",\n});\n\nexport function links() {\n  return [{ rel: \"stylesheet\", href: styles }]\n}\n\nexport default function App() {\n  return (\n    <html lang=\"en\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n", "import { ActionArgs, json } from \"@remix-run/node\";\nimport { Form, useLoaderData } from \"@remix-run/react\";\nimport { createIdea, getAllIdeas, Idea } from \"~/db/idea.server\";\n\n\ntype LoaderType = {\n  ideas: Idea[];\n}\n\ntype IntentType = \"create\" | \"delete\";\n\nexport async function loader() {\n  const ideas = await getAllIdeas();\n  return json({ ideas });\n}\n\nexport async function action({ request }: ActionArgs) {\n  const formData = await request.formData();\n  const intent = formData.get(\"intent\") as IntentType;\n\n  if(intent === \"create\") {\n    const name = formData.get(\"name\") as string;\n    const idea = await createIdea(name);\n    return json({ intent, idea });\n  }\n}\n\nexport default function Index() {\n\n  const { ideas } = useLoaderData<LoaderType>();\n  console.log(ideas);\n\n  return (\n    <div>\n      <h1 className=\"text-3xl font-bold underline\">\n        Ideas\n      </h1>\n      <Form method=\"post\">\n        <input name=\"intent\" value=\"create\" type=\"hidden\" />\n        <input type=\"text\" name=\"name\" placeholder=\"Write a idea\" />\n        <button>Send</button>\n      </Form>\n    </div>\n  );\n}\n", "import { Entity, Repository, Schema } from \"redis-om\";\nimport { redisClient, redisConnect } from \"./redis.server\";\n\nexport interface Idea {\n    name: string;\n    createAt: Date;\n}\n\nexport class Idea extends Entity {}\n\nconst ideaSchema = new Schema(Idea, {\n    name: { type: \"string\" },\n    createAt: { type: \"date\", sortable: true }\n});\n\n\nasync function getRepository(): Promise<Repository<Idea>> {\n    await redisConnect();\n    const repository = redisClient.fetchRepository(ideaSchema);\n  \n    await repository.createIndex();\n    return repository;\n}\n\nexport async function createIdea(name: string) : Promise<Idea> {\n    const repository = await getRepository();\n    return repository.createAndSave({ name, createAt: new Date() });\n}\n\nexport async function getAllIdeas() {\n    const repository = await getRepository();\n    \n    return repository.search()\n            .sortDescending(\"createAt\")\n            .all();\n}", "import { Client } from \"redis-om\";\n\nconst redisClient = new Client();\n\nasync function redisConnect () {\n    if (!redisClient.isOpen()) {\n      await redisClient.open(process.env.REDIS_URL);\n    }\n};\n\nexport { redisClient, redisConnect };", "export default {'version':'67500039','entry':{'module':'/build/entry.client-X6TAGU5R.js','imports':['/build/_shared/chunk-JMBABMNG.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-AO2RAP7M.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-VMXVO3CI.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-67500039.js'};", "\nimport * as entryServer from \"./entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/index.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route1\n    }\n  };"],
  "mappings": "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",
  "names": []
}
